// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: avatar_service.proto

package avatar_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AvatarService_SetAvatar_FullMethodName = "/avatar_service.AvatarService/SetAvatar"
	AvatarService_GetAvatar_FullMethodName = "/avatar_service.AvatarService/GetAvatar"
)

// AvatarServiceClient is the client API for AvatarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvatarServiceClient interface {
	SetAvatar(ctx context.Context, opts ...grpc.CallOption) (AvatarService_SetAvatarClient, error)
	GetAvatar(ctx context.Context, in *GetAvatarRequest, opts ...grpc.CallOption) (*GetAvatarResponse, error)
}

type avatarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvatarServiceClient(cc grpc.ClientConnInterface) AvatarServiceClient {
	return &avatarServiceClient{cc}
}

func (c *avatarServiceClient) SetAvatar(ctx context.Context, opts ...grpc.CallOption) (AvatarService_SetAvatarClient, error) {
	stream, err := c.cc.NewStream(ctx, &AvatarService_ServiceDesc.Streams[0], AvatarService_SetAvatar_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &avatarServiceSetAvatarClient{stream}
	return x, nil
}

type AvatarService_SetAvatarClient interface {
	Send(*SetAvatarRequest) error
	CloseAndRecv() (*SetAvatarResponse, error)
	grpc.ClientStream
}

type avatarServiceSetAvatarClient struct {
	grpc.ClientStream
}

func (x *avatarServiceSetAvatarClient) Send(m *SetAvatarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *avatarServiceSetAvatarClient) CloseAndRecv() (*SetAvatarResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetAvatarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *avatarServiceClient) GetAvatar(ctx context.Context, in *GetAvatarRequest, opts ...grpc.CallOption) (*GetAvatarResponse, error) {
	out := new(GetAvatarResponse)
	err := c.cc.Invoke(ctx, AvatarService_GetAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvatarServiceServer is the server API for AvatarService service.
// All implementations must embed UnimplementedAvatarServiceServer
// for forward compatibility
type AvatarServiceServer interface {
	SetAvatar(AvatarService_SetAvatarServer) error
	GetAvatar(context.Context, *GetAvatarRequest) (*GetAvatarResponse, error)
	mustEmbedUnimplementedAvatarServiceServer()
}

// UnimplementedAvatarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvatarServiceServer struct {
}

func (UnimplementedAvatarServiceServer) SetAvatar(AvatarService_SetAvatarServer) error {
	return status.Errorf(codes.Unimplemented, "method SetAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) GetAvatar(context.Context, *GetAvatarRequest) (*GetAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) mustEmbedUnimplementedAvatarServiceServer() {}

// UnsafeAvatarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvatarServiceServer will
// result in compilation errors.
type UnsafeAvatarServiceServer interface {
	mustEmbedUnimplementedAvatarServiceServer()
}

func RegisterAvatarServiceServer(s grpc.ServiceRegistrar, srv AvatarServiceServer) {
	s.RegisterService(&AvatarService_ServiceDesc, srv)
}

func _AvatarService_SetAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvatarServiceServer).SetAvatar(&avatarServiceSetAvatarServer{stream})
}

type AvatarService_SetAvatarServer interface {
	SendAndClose(*SetAvatarResponse) error
	Recv() (*SetAvatarRequest, error)
	grpc.ServerStream
}

type avatarServiceSetAvatarServer struct {
	grpc.ServerStream
}

func (x *avatarServiceSetAvatarServer) SendAndClose(m *SetAvatarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *avatarServiceSetAvatarServer) Recv() (*SetAvatarRequest, error) {
	m := new(SetAvatarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AvatarService_GetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).GetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvatarService_GetAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).GetAvatar(ctx, req.(*GetAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AvatarService_ServiceDesc is the grpc.ServiceDesc for AvatarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvatarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avatar_service.AvatarService",
	HandlerType: (*AvatarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvatar",
			Handler:    _AvatarService_GetAvatar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetAvatar",
			Handler:       _AvatarService_SetAvatar_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "avatar_service.proto",
}
